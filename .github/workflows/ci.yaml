name: CI
on:
  push:
    branches:
      - master
      - develop
  release:
    types: [published]
  pull_request:
    branches:
      - master
      - develop
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
      - run: cd website && yarn && yarn build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 'Deploy safe-apps-developer-ui to S3: Develop'
        if: github.ref == 'refs/heads/develop'
        run: aws s3 sync website/build/safe-docs s3://${{ secrets.AWS_DEV_BUCKET_NAME }}/safe --delete

      - name: 'Deploy safe-apps-developer-ui to S3: Staging'
        if: github.ref == 'refs/heads/master'
        run: aws s3 sync website/build/safe-docs s3://${{ secrets.AWS_STAGING_BUCKET_NAME }}/safe --delete

      - name: Get tag version
        id: get_tag_version
        if: startsWith(github.ref, 'refs/tags/')
        run: echo ::set-output name=VERSION_TAG::${GITHUB_REF#refs/tags/}

      - name: 'Prepare safe-apps-developer-ui for deploy to Production'
        if: startsWith(github.ref, 'refs/tags/v')
        run: aws s3 sync website/build/safe-docs s3://${{ secrets.AWS_STAGING_BUCKET_NAME }}/releases/${{ github.event.release.tag_name }} --delete

      - name: 'Production deployment: Enable production deployment'
        if: success() && startsWith(github.ref, 'refs/tags/v')
        run: bash .github/scripts/prepare_production_deployment.sh
        env:
          PROD_DEPLOYMENT_HOOK_TOKEN: ${{ secrets.PROD_DEPLOYMENT_HOOK_TOKEN }}
          PROD_DEPLOYMENT_HOOK_URL: ${{ secrets.PROD_DEPLOYMENT_HOOK_URL }}
          VERSION_TAG: ${{ steps.get_tag_version.outputs.VERSION_TAG }}
